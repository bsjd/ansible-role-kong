# Copyright (c) Ontic. (http://www.ontic.com.au). All rights reserved.
# See the COPYING file bundled with this package for license details.

---

- hosts: 'localhost'
  vars:
    account_username: 'web'
    account_password: 'secret'
    account_password_hash: '{{ account_password | password_hash("sha512", "kong") }}'
    account_password_md5: 'md5{{ (account_password + "web") | hash("md5") }}'
    account_root: '/home/{{ account_username }}'
    account_group: 'web'
    account_groups:
      - name: '{{ account_group }}'
    account_users:
      - name: '{{ account_username }}'
        group: '{{ account_group }}'
        password: '{{ account_password_hash }}'
    postgresql_authentication:
      - { type: 'local', database: 'all', user: 'postgres', auth_method: 'peer' }
      - { type: 'local', database: 'all', user: 'all', auth_method: 'peer' }
      - { type: 'host', database: 'all', user: 'all', address: '127.0.0.1/32', auth_method: 'md5' }
      - { type: 'host', database: 'all', user: 'all', address: '::1/128', auth_method: 'md5' }
    postgresql_global_config:
      - { option: 'listen_addresses', value: 'localhost' }
      - { option: 'password_encryption', value: 'md5' }
    postgresql_users:
      - name: 'web'
        password: '{{ account_password_md5 }}'
    postgresql_databases:
      - name: 'kong'
    postgresql_schemas:
    postgresql_privileges:
      - database: 'kong'
        type: 'schema'
        roles: 'web'
        privs: 'ALL'
        objs: 'public'
    kong_config:
      - { option: 'database', value: 'postgres' }
      - { option: 'pg_host', value: 'localhost' }
      - { option: 'pg_port', value: '5432' }
      - { option: 'pg_user', value: 'web' }
      - { option: 'pg_password', value: '{{ account_password }}' }
      - { option: 'pg_database', value: 'kong' }
      - { option: 'pg_ssl', value: 'off' }
      - { option: 'pg_ssl_verify', value: 'off' }
  tasks:
    - name: 'Install Curl'
      package:
        name: 'curl'
        state: 'present'
    - name: 'Create a service'
      kong_service:
        id: 'example-service'
        name: 'example-service'
        url: 'http://mockbin.org/request'
        action: 'create'
    - name: 'Create a route'
      kong_route:
        id: 'example-route'
        service: 'example-service'
        hosts: 'example.com'
        action: 'create'
    - name: 'Create a consumer'
      kong_consumer:
        id: 'example-consumer'
        username: 'adam'
        custom_id: '1234'
        action: 'create'
    - name: 'Create a plugin'
      kong_plugin:
        id: 'example-plugin'
        name: 'key-auth'
        enabled: true
        action: 'create'
    - name: 'Create a upstream'
      kong_upstream:
        id: 'example-upstream'
        name: 'api.localhost.com'
        action: 'create'
    - name: 'Create a target'
      kong_target:
        target: '127.0.0.1:9080'
        weight: 15
        upstream: 'example-upstream'
        action: 'create'
    - name: 'Find a target'
      kong_target:
        target: '127.0.0.1:9080'
        upstream: 'example-upstream'
        action: 'find'
      register: 'target_find'
    - name: 'Debug target find'
      debug:
        var: 'target_find'
    - name: 'Ensure all endpoints are secured'
      uri:
        url: 'http://localhost:8000'
        method: 'GET'
        headers:
          Host: 'example.com'
        status_code: 401
    - name: 'Create an API key'
      uri:
        url: 'http://localhost:8001/consumers/adam/key-auth'
        method: 'POST'
        status_code: 201, 409
        body_format: 'json'
        body:
          key: 'SECRET_KEY'
      register: 'response'
      changed_when: 'response.status == 201'
    - name: 'Ensure API key can be authenticated'
      uri:
        url: 'http://localhost:8000'
        method: 'GET'
        headers:
          Host: 'example.com'
          apikey: 'SECRET_KEY'
        status_code: 200
  roles:
    - { role: 'ontic.account' }
    - { role: 'ontic.postgresql' }
    - { role: 'role_under_test' }